using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libxml2"], :libxml2),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaPackaging/Yggdrasil/releases/download/XML2-v2.9.9+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/XML2.v2.9.9.aarch64-linux-gnu.tar.gz", "604757191ab7627cb329a7ba1f677bee20391d17e82dbfb815a31acafa77a1ba"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/XML2.v2.9.9.aarch64-linux-musl.tar.gz", "1065b547e8df91c15a5550429456bce2fa1255163ef7b69d9d7bca73efb32db2"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/XML2.v2.9.9.arm-linux-gnueabihf.tar.gz", "89f3adc86a715d2e47d02cc0668f7882b074f2e28187648e37bcd2926f35cc7c"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/XML2.v2.9.9.arm-linux-musleabihf.tar.gz", "0b8bbfc68cb9843ae32e0be3d39543f8588779c1ed1527aad6d4bee8caec304f"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/XML2.v2.9.9.i686-linux-gnu.tar.gz", "e490219e459949bf6afca17d6234709e52f17283c1a386bdd7900c978e3ad5c9"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/XML2.v2.9.9.i686-linux-musl.tar.gz", "a5c9e3002d17838387b144c32ece61bf4aa92609595b0c9c40c0d42cef0504ce"),
    Windows(:i686) => ("$bin_prefix/XML2.v2.9.9.i686-w64-mingw32.tar.gz", "d9bda1b2d9c2daa18bc8afc6c42d2b75df1197cf365984905ef19f9bb612db13"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/XML2.v2.9.9.powerpc64le-linux-gnu.tar.gz", "8aaaa33436b2ec0fcded70a8759ec6cec07b14b8fe8863c350a805bdc081f733"),
    MacOS(:x86_64) => ("$bin_prefix/XML2.v2.9.9.x86_64-apple-darwin14.tar.gz", "d01cc7d9e1f3ce91a3d2a0e76d7a23ece637e7f36649e7e2160c99ba3b60c565"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/XML2.v2.9.9.x86_64-linux-gnu.tar.gz", "bd56d9f123c0d58b6ca8c4b1c058f4fceaaa41c25770267f2cf134f2c0d59fd6"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/XML2.v2.9.9.x86_64-linux-musl.tar.gz", "f5104a3d393489a4af0f2012ec5ef67c5b0b604db2ffdf5e38dc5c18704ea7c0"),
    FreeBSD(:x86_64) => ("$bin_prefix/XML2.v2.9.9.x86_64-unknown-freebsd11.1.tar.gz", "e914a0e979b349d5d698771dac8bade44d53e4eb113b45eea1824e1f62f39ae4"),
    Windows(:x86_64) => ("$bin_prefix/XML2.v2.9.9.x86_64-w64-mingw32.tar.gz", "33e3f2b6c7fceaf30abd84428c412bd238b30c60f758addf094b9ce70b1382e3"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
